{"version":3,"file":"../Projectile.js","sourceRoot":"../../src","sources":["Projectile.coffee"],"names":[],"mappings":"AAAA,IAAA,cAAA,EAAA,OAAA,EAAA,UAAA,EAAA;;AAAA,cAAA,GAAiB,OAAA,CAAQ,YAAR,CAAqB,CAAC;;AACvC,OAAA,GAAU,OAAA,CAAQ,WAAR;;AACV,OAAA,GAAU,OAAA,CAAQ,WAAR;;AAEV,MAAM,CAAC,OAAP,GAAuB;EAAN,MAAA,WAAA,QAAyB,eAAzB;IAEf,IAAM,CAAA,CAAA;WAAN,CAAA,IACE,CAAA;MACA,IAAC,CAAA,OAAD,GAAW;aACX,IAAC,CAAA,WAAD,CAAA;IAHI;;IA2BN,OAAS,CAAA,CAAA;MACP,IAAC,CAAA,cAAD,CAAA;aACA,OAAO,CAAC,QAAQ,CAAC,cAAjB,CAAgC,IAAC,CAAA,QAAD,CAAU,mBAAV,CAAhC;IAFO;;EA7BM;;EACf,UAAC,CAAA,MAAD,CAAQ,OAAR;;EAKA,UAAC,CAAA,UAAD,CACE;IAAA,gBAAA,EACE;MAAA,MAAA,EAAQ,QAAA,CAAC,WAAD,CAAA;AACN,YAAA;QAAA,SAAA,GAAY,WAAW,CAAC,IAAZ,CAAiB,WAAjB;QACZ,wBAAG,SAAS,CAAE,WAAX,CAAuB,aAAvB,UAAH;iBACE,WAAW,CAAC,IAAZ,CAAiB,aAAjB,EAA+B,SAA/B,EADF;SAAA,MAEK,wBAAG,SAAS,CAAE,WAAX,CAAuB,SAAvB,UAAH;iBACH,WAAW,CAAC,IAAZ,CAAiB,SAAjB,EAA2B,SAA3B,EADG;SAAA,MAAA;iBAGH,WAAW,CAAC,IAAZ,CAAiB,YAAjB,CAA8B,CAAC,iBAH5B;;MAJC;IAAR,CADF;IASA,QAAA,EACE;MAAA,MAAA,EAAQ,QAAA,CAAC,UAAD,CAAA;eACN,IAAC,CAAA,UAAU,CAAC,cAAZ,CAA2B,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAA3B;MADM;IAAR,CAVF;IAYA,QAAA,EACE;MAAA,MAAA,EAAQ,QAAA,CAAC,UAAD,CAAA;eACN,IAAC,CAAA,UAAU,CAAC,cAAZ,CAA2B,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAA3B;MADM;IAAR,CAbF;IAeA,MAAA,EACE;MAAA,MAAA,EAAQ,QAAA,CAAA,CAAA;QACN,IAAG,IAAC,CAAA,MAAJ;iBACE,OAAO,CAAC,QAAQ,CAAC,WAAjB,CAA6B,IAAC,CAAA,QAAD,CAAU,mBAAV,CAA7B,EADF;SAAA,MAAA;iBAGE,OAAO,CAAC,QAAQ,CAAC,cAAjB,CAAgC,IAAC,CAAA,QAAD,CAAU,mBAAV,CAAhC,EAHF;;MADM;IAAR;EAhBF,CADF","sourcesContent":["BaseProjectile = require('parallelio').Projectile\nDisplay = require('./Display')\nUpdater = require('./Updater')\n\nmodule.exports = class Projectile extends BaseProjectile\n  @extend Display\n  init: ->\n    super()\n    @baseCls = 'projectile'\n    @initDisplay()\n  @properties\n    displayContainer:\n      calcul: (invalidator) ->\n        container = invalidator.prop('container')\n        if container?.getProperty('tileDisplay')\n          invalidator.prop('tileDisplay',container)\n        else if container?.getProperty('display')\n          invalidator.prop('display',container)\n        else \n          invalidator.prop('originTile').displayContainer\n    displayX:\n      calcul: (invalidate)->\n        @originTile.tileToDisplayX invalidate.prop('x')\n    displayY:\n      calcul: (invalidate)->\n        @originTile.tileToDisplayY invalidate.prop('y')\n    moving:\n      change: ()->\n        if @moving\n          Updater.instance.addCallback(@callback('invalidatePrcPath'))\n        else\n          Updater.instance.removeCallback(@callback('invalidatePrcPath'))\n\n  destroy: ->\n    @destroyDisplay()\n    Updater.instance.removeCallback(@callback('invalidatePrcPath'))\n\n\n"]}